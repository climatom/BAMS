#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
This script analyses the SEB series generated by run_SEB.py.

First iteration is to investigate the "summit" SEB series during days with 
max melt
"""
import scipy.stats as spy

import pandas as pd, numpy as np
import datetime
import matplotlib.pyplot as plt

font = {'family' : 'Sans',
        'size'   : 7}

plt.rc('font', **font)

# Define files
din="/home/lunet/gytm3/Everest2019/Research/BAMS/Data/SEB/"
dout="/home/lunet/gytm3/Everest2019/Research/BAMS/Figures/"
fin=din+"summit_z0_1.300.csv"
fin_upper=din+"summit_z0_13.000.csv"
fin_lower=din+"summit_z0_0.130.csv"

# Read file in 
data=pd.read_csv(fin,parse_dates=True,index_col=0)
data_upper=pd.read_csv(fin_upper,parse_dates=True,index_col=0)
data_lower=pd.read_csv(fin_lower,parse_dates=True,index_col=0)
data["T"]=data["T"]-273.15
data["ts"]=data["ts"]-273.15
data["rh"]=data["rh"]*100.
data.index=data.index+datetime.timedelta(hours=5.75)


## Find day of max melt rate 
daily=data.resample("D").max()

# Also compute a daysum series (for plotting melt and ablation)
daysum=data.resample("D").sum()
daysum_upper=data_upper.resample("D").sum()
daysum_lower=data_lower.resample("D").sum()

# Day mean 
daymean=data.resample("D").mean()

#daymean=data.resample("D").mean()
#day=daymean.loc[daysum["ts"]==daysum["ts"].max()].index
#seldata=data.loc[data.index.dayofyear==day.dayofyear[0]]

# Count on how many days melt occurred
ndays_melt=np.sum(daily["ts"]==0);

# Find all *days* on which melt occurred 
dates=(data.loc[data["ts"]==0.]).index
# get them
ens=data.loc[(data.index.dayofyear).isin(dates.dayofyear)]
# Nugget: how unusual was SW on these days? - use max
ens_day=ens.resample("D").max()
sw_pc=spy.percentileofscore(daily["sw"],ens_day["sw"].mean())

# Aggregate ens by hour
ens_hour=ens.groupby(ens.index.hour)
ens_mean=ens_hour.mean()
ens_std=ens_hour.std()

# Plot
fig,ax=plt.subplots(3,1)
fig.set_size_inches(4,6)

# Time series 
ax2=ax.flat[0].twinx()
ax.flat[0].bar(daysum.index,daysum["Melt"],color='k')
ax2.plot(daysum.index,daysum["Melt"].cumsum(),color="k")
ax2.plot(daysum.index,daysum["sub"].cumsum(),color="red")
ax2.fill_between(daysum.index,\
    daysum_upper["Melt"].cumsum(),\
    daysum_lower["Melt"].cumsum(),color="k",
    alpha=0.3)
ax2.fill_between(daysum.index,\
    daysum_upper["sub"].cumsum(),\
    daysum_lower["sub"].cumsum(),color="red",
    alpha=0.3)
ax.flat[0].grid()
labs=ax.flat[0].get_xticklabels(); print labs
ax2.set_ylim(0,120)
ax.flat[0].set_xlim(daysum.index.min(),daysum.index.max())
ax.flat[0].set_xlabel("Date")
ax.flat[0].set_ylabel("Melt Rate (mm w.e. d$^{-1}$)")
ax2.set_ylabel("Cumulative Melt/Sublimation\n (mm w.e)")
#ax.flat[0].xticks(rotation='vertical')


# ts and energy
ax.flat[1].plot(ens_mean.index,ens_mean["ts"],color='k',label="T$_{s}$")
lower=ens_mean["ts"]-ens_std["ts"]; 
upper=ens_mean["ts"]+ens_std["ts"]; upper[upper>0]=0.
ax.flat[1].fill_between(ens_mean.index,lower,upper,color='k',alpha=0.3)
ax2=ax.flat[1].twinx()
cols=["green","blue","orange","purple","grey","black"]
labels=["Q$_{H}$","Q$_{L}$","Q$_{SW}$","Q$_{LW}$"]
ax[1].set_ylabel("Surface Temperature ($^{\circ}$C)")
ax2.set_ylabel("Energy Flux (W/m$^{-2}$)")
ax.flat[1].set_xlim(0,23)
ax.flat[1].grid()

count=0
for i in ["shf","lhf","sw","lw"]:
    lower=ens_mean[i]-ens_std[i]
    upper=ens_mean[i]+ens_std[i]
    ax2.plot(ens_mean.index,ens_mean[i],color=cols[count],label=labels[count])
    ax2.fill_between(ens_mean.index,lower,upper,color=cols[count],alpha=0.3)
    count+=1
ax.flat[1].legend(loc=2)
ax2.legend(loc=1)


## Weather
axes = [ax.flat[2], ax.flat[2].twinx(), ax.flat[2].twinx()]

# Make some space on the right side for the extra y-axis.
fig.subplots_adjust(right=0.7)

# Move the last y-axis spine over to the right by 20% of the width of the axes
axes[-1].spines['right'].set_position(('axes', 1.2))

# To make the border of the right-most axis visible, we need to turn the frame
# on. This hides the other plots, however, so we need to turn its fill off.
axes[-1].set_frame_on(True)
axes[-1].patch.set_visible(False)

# Temp
axes[0].plot(ens_mean.index,ens_mean["T"],color='k',label="T$_{a}$")
lower=ens_mean["T"]-ens_std["T"]; 
upper=ens_mean["T"]+ens_std["T"]
axes[0].fill_between(ens_mean.index,lower,upper,color='black',alpha=0.3)
axes[0].set_ylim(-20,-10)
axes[0].set_ylabel("Air Temp. ($^{\circ}$C)")
axes[0].plot(1,1,label="Wind speed",color="red")
axes[0].plot(1,1,label="Rel. Humidity",color="cyan")

# RH
axes[1].plot(ens_mean.index,ens_mean["rh"],color='cyan')
lower=ens_mean["rh"]-ens_std["rh"]; 
upper=ens_mean["rh"]+ens_std["rh"]
axes[1].fill_between(ens_mean.index,lower,upper,color='cyan',alpha=0.3)
axes[1].set_ylim(0,100)
axes[1].set_ylabel("Rel. Humidity (%)")
# WS
axes[2].plot(ens_mean.index,ens_mean["wind"],color='red')
lower=ens_mean["wind"]-ens_std["wind"]; lower[lower<0]=0 
upper=ens_mean["wind"]+ens_std["wind"]
axes[2].fill_between(ens_mean.index,lower,upper,color='red',alpha=0.3)
axes[2].set_ylim(0,10)
axes[2].set_xlim(0,23)
axes[2].set_ylabel("Wind Speed (m/s)")
axes[0].legend(loc=1,ncol=1)
axes[0].grid()
axes[0].set_xlabel("Hour of Day (NPT)")
plt.tight_layout()
fig.savefig(dout+"Summit_melt.png",dpi=300)
    
    

